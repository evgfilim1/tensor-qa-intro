name: "Run QA tests"
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read

env:
  REGISTRY: ghcr.io

jobs:
  build-docker:
    name: "Build Docker image"
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Login to ghcr.io"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Collect Docker image metadata"
        id: docker_build_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      - name: "Build and push Docker image"
        id: docker_push
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.docker_build_meta.outputs.tags }}
          labels: ${{ steps.docker_build_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
      - name: Attest
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}
          subject-digest: ${{ steps.docker_push.outputs.digest }}
          push-to-registry: true
  test:
    name: "Run Docker test container"
    runs-on: ubuntu-latest
    needs:
      - build-docker
    steps:
      - name: Get Docker Compose config file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl \
            -H "Accept: application/vnd.github.v3.raw" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -o compose.yaml \
            "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/contents/compose.yaml"
      - name: "Restore .env configuration"
        run: |
          cat >.env <<\EOF
          ${{ secrets.ENV_FILE }}
          EOF
      - name: "Run tests"
        run: |
          echo "==> Running tests"
          echo "PYTEST_MD_REPORT_FLAVOR=github" >>.env
          if [ -n "${CI:-}" ]; then
            echo "CI=$CI" >>.env
          fi
          IMAGE_REF=ghcr.io/${GITHUB_REPOSITORY}:sha-${GITHUB_SHA::7} \
          docker compose up \
            --no-build \
            --abort-on-container-exit \
            --exit-code-from tests \
            --attach tests
          docker cp "$(docker compose ps -aq tests):/app/test-report.md" ./
          echo "==> Generating test report"
          {
            printf '# Test report\n## Summary\n'
            cat test-report.md
            printf '\n## Logs\n\n<details>\n<summary>Click to open</summary>\n\n```\n'
            docker compose logs --no-log-prefix tests
            printf '```\n\n</details>\n'
          } >>"$GITHUB_STEP_SUMMARY"
      - name: "Copy assets from selenium container"
        run: |
          docker cp "$(docker compose ps -aq selenium):/opt/selenium/assets" ./
      - name: "Upload videos as artifact"
        uses: actions/upload-artifact@v4
        with:
          name: assets
          if-no-files-found: warn
          retention-days: "30"
          path: |
            assets/
      - name: "Cleanup"
        if: always()
        run: |
          docker compose down -v --remove-orphans
          rm -rf .env compose.yaml assets
